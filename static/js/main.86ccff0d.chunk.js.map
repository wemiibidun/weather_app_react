{"version":3,"sources":["graphql/Queries.js","Pages/Home.js","App.js","reportWebVitals.js","index.js"],"names":["GET_WEATHER_QUERY","gql","Home","useState","citySearched","setCitysearched","useLazyQuery","variables","name","getWeather","data","error","console","log","className","type","placeholder","onChange","event","target","value","onClick","getCityByName","weather","temperature","actual","summary","description","wind","speed","App","client","ApolloClient","cache","InMemoryCache","uri","ApolloProvider","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"kOAEaA,EAAoBC,YAAH,ygB,OCkEfC,MA5Df,WACI,MAAwCC,mBAAS,IAAjD,mBAAOC,EAAP,KAAqBC,EAArB,KAGA,EAAoCC,YAAaN,EAAmB,CAChEO,UAAW,CAAEC,KAAMJ,KADvB,mBAAOK,EAAP,YAAoBC,EAApB,EAAoBA,KAIpB,OAJA,EAA0BC,MAIR,8CACdD,GACAE,QAAQC,IAAIH,GAMZ,sBAAKI,UAAW,OAAhB,UACG,oDAEA,sBAAKA,UAAU,YAAf,UAEC,uBAAOC,KAAO,OAAOC,YAAa,0BAClCC,SAAY,SAACC,GACTb,EAAgBa,EAAMC,OAAOC,UAI7B,wBAAQC,QAAW,kBAAOZ,KAA1B,yBAIJ,qBAAKK,UAAY,UAAjB,SACKJ,GACD,mCACI,kCACI,gCACI,+BACI,2CACA,6CACA,6CACA,iDAGR,gCACI,+BACI,6BAAKA,EAAKY,cAAcd,OACxB,6BAAKE,EAAKY,cAAcC,QAAQC,YAAYC,SAC5C,6BAAKf,EAAKY,cAAcC,QAAQG,QAAQC,cACxC,6BAAKjB,EAAKY,cAAcC,QAAQK,KAAKC,yB,wBCrCtDC,MAbf,WACE,IAAMC,EAAS,IAAIC,IAAa,CAC9BC,MAAO,IAAIC,IACXC,IAAK,+CAGP,OACA,eAACC,EAAA,EAAD,CAAgBL,OAAUA,EAA1B,eACE,cAAC,EAAD,QCFWM,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCFdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.86ccff0d.chunk.js","sourcesContent":["import { gql } from \"@apollo/client\";\n\nexport const GET_WEATHER_QUERY = gql`\n  query getCityByName($name: String!) {\n    getCityByName(name: $name) {\n      name\n      country\n      weather {\n        summary {\n          title\n          description\n          icon\n        }\n        temperature {\n          actual\n          feelsLike\n          min\n          max\n        }\n        wind {\n          speed\n          deg\n        }\n        clouds {\n          all\n          visibility\n          humidity\n        }\n        timestamp\n      }\n    }\n  }\n`;","import React, {useState} from 'react';\nimport { useLazyQuery } from '@apollo/client';\nimport {GET_WEATHER_QUERY } from '../graphql/Queries';\nimport '../App.css';\n\n\n\n\nfunction Home() {\n    const [citySearched, setCitysearched] = useState('');\n\n\n    const [getWeather, {data, error}] = useLazyQuery(GET_WEATHER_QUERY, {\n        variables: { name: citySearched }\n    });\n\n    if (error) return <h1>Error Found</h1>\n    if (data) {\n        console.log(data )\n    }\n\n\n\n    return (\n        <div className =\"home\">\n           <h1>Search for Weather</h1>\n\n           <div className=\"container\">\n\n            <input type = \"text\" placeholder =\"Enter City Name here...\" \n            onChange = {(event) => {\n                setCitysearched(event.target.value)\n                }}\n                />\n\n                <button onClick = {()  => getWeather()}> Search </button>\n            \n            </div>\n\n            <div className = \"weather\">\n                {data &&(\n                <>\n                    <table>\n                        <thead>\n                            <tr>\n                                <th>City Name</th>\n                                <th>Temperature</th>\n                                <th>Description</th>\n                                <th>Wind Speed</th>\n                            </tr>\n                        </thead>\n                        <tbody>\n                            <tr>\n                                <td>{data.getCityByName.name}</td>\n                                <td>{data.getCityByName.weather.temperature.actual }</td>\n                                <td>{data.getCityByName.weather.summary.description }</td>\n                                <td>{data.getCityByName.weather.wind.speed }</td>\n                            </tr>\n                        </tbody>\n                    </table>\n                </>\n                )}\n                \n            </div>\n        </div>\n    )\n}\n\nexport default Home\n","import './App.css';\nimport Home from './Pages/Home';\nimport { ApolloClient, InMemoryCache, ApolloProvider } from '@apollo/client';\n\n//Apollo Client is a management libarary for Javascript that enables us to manage both local and remote data with GraphQL. It includes the in-memory cache, local state management, error handling, and a React-based view layer.\n\nfunction App() {\n  const client = new ApolloClient({\n    cache: new InMemoryCache(), //this is an instance of InMemoryCache, which Apollo Client uses to cache query results after fetching them\n    uri: \"https://graphql-weather-api.herokuapp.com/\" //this specifies the URL of our GraphQL server.\n  })\n  \n  return (\n  <ApolloProvider client = {client}>  {/* this tells our application that, this is where we are going to be making our API call */}\n    <Home />\n  </ApolloProvider>\n  );\n}\n\nexport default App;\n\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}